import "json"

try_float = >(val) {
  try {
    f = float(val)
    if (f.is_integer()) { return int(f) }
    return f
  } catch Exception e { return val }
}


class Codegen() {
  lambda_c = 0
  indent_c = 0
  head = ""
  out = ""

  fn idt(self) { return "  " * self.indent_c }
  fn parse_block(self, body) {
    cg = Codegen()
    cg.indent_c = self.indent_c+1
    return cg.run({t: "Main", body})
  }

  fn do_args(self, args) {
    cg = Codegen()
    cg.indent_c = self.indent_c
    cg.lambda_c = self.lambda_c
    for (i=0; i<len(args); i=i+1) {
      cg.run(args[i])
      cg.out = cg.out + ","
    }

    if (len(cg.out) > 0 & cg.out[0-1] == ",") {  // slice last comma if its there
      cg.out = __inline("cg.out[:-1]")
    }
    return [cg.head, cg.out]
  }


  fn run(self, node) {
    run = self.run  idt = self.idt

    if (node["t"] == "Main") {
      for (i=0; i<len(node["body"]); i=i+1) {
        self.out = self.out + idt()
        run(node["body"][i])  self.out = self.out + "\n"
      }
      self.out = self.head + self.out
      return self.out
    } else if (node["t"] == "Assign") {
      run(node["key"])
      self.out = self.out + " = "
      run(node["val"])
    } else if (node["t"] == "ImportStmt") {
      self.head = self.head + "import {}\n".format(node["mod"])
    } else if (node["t"] == "RetStmt") {
      self.out = self.out + "return "
      run(node["expr"])
    } else if (node["t"] == "FnStmt") {
      if (node["isAsync"]) { self.out = self.out + "async " }
      self.out = self.out + "def {}(".format(node["name"])
      self.out = self.out + (self.do_args(node["args"]))[1]  // we only care about the body since we dont expect imports, lambdas..
      self.out = self.out + "):\n"
      self.out = self.out + self.parse_block(node["body"])
    

    } else if (node["t"] == "IfStmt") {
      self.out = self.out + "if "
      run(node["expr"])
      self.out = self.out + ":\n"
      self.out = self.out + self.parse_block(node["body"])

      if (len(node["alt"]) > 0 & node["alt"][0]["t"] == "IfStmt") {
        self.out = self.out + idt() + "el"  // Since the next run will be the if stmt, it will become "elif "
        run(node["alt"][0])
      } else if (len(node["alt"]) > 0) {
        self.out = self.out + idt() + "else:\n"
        self.out = self.out + self.parse_block(node["alt"])
      }
    } else if (node["t"] == "ForStmt") {
      run(node["init"])
      self.out = self.out + "\n{}while ".format(idt())
      run(node["expr"])
      self.out = self.out + ":\n"
      self.out = self.out + self.parse_block(node["body"])

      self.indent_c = self.indent_c+1
      self.out = self.out + idt()
      run(node["after"])
      self.indent_c = self.indent_c-1
    } else if (node["t"] == "WhileStmt") {
      self.out = self.out + "\n{}while ".format(idt())
      run(node["expr"])
      self.out = self.out + ":\n"
      self.out = self.out + self.parse_block(node["body"])

    } else if (node["t"] == "ClassStmt") {
      self.out = self.out + idt() + "class "
      self.out = self.out + "{}({}):\n".format(node["name"], ",".join(node["inherits"]))
      self.out = self.out + self.parse_block(node["body"])
    } else if (node["t"] == "TryCatch") {
      self.out = self.out + "try:\n"
      self.out = self.out + self.parse_block(node["body"])
      self.out = self.out + idt() + "except "
      run(node["asVar"][0])
      self.out = self.out + " as {}:\n".format(node["asVar"][1])
      self.out = self.out + self.parse_block(node["alt"])

  
    } else if (node["t"] == "Fcall") {
      if (node["caller"]["t"] == "Word" & node["caller"]["val"] == "__inline") {
        self.out = self.out + node["args"][0]["val"]  // str type
      } else {
        run(node["caller"])
        self.out = self.out + "("
        args = self.do_args(node["args"])
        self.head = self.head + args[0]  // head
        self.out = self.out + args[1]    // body
        self.out = self.out + ")"
      }
    } else if (node["t"] == "BinOp") {
      if (node["op"] == "&") { node["op"] = "and" }
      else if (node["op"] == "|") { node["op"] = "or" }

      self.out = self.out + "("
      run(node["l"])
      self.out = self.out + " {} ".format(node["op"])
      run(node["r"])
      self.out = self.out + ")"
    } else if (node["t"] == "Member") {
      if (node["computed"] == True) {
        run(node["obj"])
        self.out=self.out+"["
        run(node["prop"])
        self.out=self.out+"]"
      } else {
        run(node["obj"])
        self.out=self.out+"."
        run(node["prop"])
      }
    
    } else if (node["t"] == "Word" | node["t"] == "Int") {
      self.out = self.out + str( try_float(node["val"]) )
    } else if (node["t"] == "Str") {
      self.out = self.out + json.dumps(node["val"])
    } else if (node["t"] == "Lambda") {
      self.lambda_c = self.lambda_c + 1
      self.head = self.head + idt() + "def __lambda_{}(".format(self.lambda_c)
      self.head = self.head + (self.do_args(node["args"]))[1] // we only care about the body since we dont expect imports, lambdas..
      self.head = self.head + "):\n"
      self.head = self.head + self.parse_block(node["body"])
      
      self.out = self.out + "__lambda_{}".format(self.lambda_c)
    
    } else if (node["t"] == "Object") {
      self.out = self.out + "{"
      for (i=0; i<len(node["props"]); i=i+1) {
        prop = node["props"][i]
        k = try_float(prop["k"])
        if (type(k) == float | type(k) == int) { self.out = self.out + str(k) } 
        else { self.out = self.out + "\""+k+"\"" }  // add "" if not number

        if (prop["v"] == None) {
          self.out = self.out + ": " + k
        } else {
          self.out = self.out + ": "
          run(prop["v"])
        }
        self.out = self.out + ","
      }
      self.out = self.out + "}"
    } else if (node["t"] == "Array") {
      self.out = self.out + "["
      for (i=0; i<len(node["props"]); i=i+1) {
        run(node["props"][i])
        self.out = self.out + ","
      }
      self.out = self.out + "]"
      
    } else {
      raise(Exception("unimplemented node type: {}".format(node["t"])))
    }
  }
}